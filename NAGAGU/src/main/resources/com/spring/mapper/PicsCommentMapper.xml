<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	private int PICS_RE_NUM;
	private int PICS_RE_PICS;
	private int PICS_RE_MEMBER;
	private Date PICS_RE_DATE;
	private String PICS_RE_CONTENT;
	private int PICS_RE_REF;
	private int PICS_RE_STEP;
	private int PICS_RE_LEVEL;
	 -->
<!-- 이 xml문서와 맵핑할 인터페이스 경로, 이름 -->
<mapper namespace="com.spring.mapper.PicsCommentMapper">
	<resultMap type="java.util.HashMap" id="hashmapVO">
		<result property="PICS_RE_NUM" column="PICS_RE_NUM" />	
		<result property="PICS_RE_PICS" column="PICS_RE_PICS" />	
		<result property="PICS_RE_MEMBER" column="PICS_RE_MEMBER" />
		<result property="PICS_RE_DATE" column="PICS_RE_DATE" />	
		<result property="PICS_RE_CONTENT" column="PICS_RE_CONTENT" />
		<result property="PICS_RE_REF" column="PICS_RE_REF" />	
		<result property="PICS_RE_STEP" column="PICS_RE_STEP" />	
		<result property="PICS_RE_LEVEL" column="PICS_RE_LEVEL" />			
	</resultMap>

	<resultMap type="com.spring.community.PicsCommentDB" id="commentResultMap">
		<result property="PICS_RE_NUM" column="PICS_RE_NUM" />	
		<result property="PICS_RE_PICS" column="PICS_RE_PICS" />	
		<result property="PICS_RE_MEMBER" column="PICS_RE_MEMBER" />
		<result property="PICS_RE_DATE" column="PICS_RE_DATE" />	
		<result property="PICS_RE_CONTENT" column="PICS_RE_CONTENT" />
		<result property="PICS_RE_REF" column="PICS_RE_REF" />	
		<result property="PICS_RE_STEP" column="PICS_RE_STEP" />	
		<result property="PICS_RE_LEVEL" column="PICS_RE_LEVEL" />			
	</resultMap>
	
<!-- 	<select id="getPicsCountAll" resultType="int">
		SELECT count(*) FROM PICS  WHERE 1=1
		  <if test="PICS_REVIEW == 1">  AND PICS_REVIEW=#{PICS_REVIEW} </if>
		  <if test="PICS_CATEGORY != 'all'"> AND PICS_CATEGORY=#{PICS_CATEGORY} </if>
	</select> -->
	 <select id="getCount" resultType="int"> 
		SELECT COUNT(*) FROM PICS_COMMENT
	</select>
	<select id="getMaxNum" resultType="int">
		SELECT MAX(PICS_RE_NUM) FROM PICS_COMMENT
	</select>
	 <select id="getCommentList" parameterType="com.spring.community.PicsCommentDB" resultMap="commentResultMap">
		SELECT * FROM PICS_COMMENT WHERE PICS_RE_PICS=#{PICS_RE_PICS} ORDER BY PICS_RE_REF DESC, PICS_RE_STEP DESC 
	</select> 
	
	<insert id="insertComment" parameterType="com.spring.community.PicsCommentDB">
		insert into PICS_COMMENT values
		(#{PICS_RE_NUM},#{PICS_RE_PICS},#{PICS_RE_MEMBER},SYSDATE,#{PICS_RE_CONTENT},#{PICS_RE_REF},#{PICS_RE_STEP},#{PICS_RE_LEVEL})	
	</insert>
	<delete id="deleteComment" parameterType="int">	
		DELETE FROM PICS_COMMENT WHERE PICS_RE_NUM=#{PICS_RE_NUM}
	</delete>
	<update id="updateComment" parameterType="com.spring.community.PicsCommentDB">
		UPDATE PICS_COMMENT SET PICS_RE_CONTENT=#{PICS_RE_CONTENT} WHERE PICS_RE_NUM=#{PICS_RE_NUM}
	</update>
	<update id="updateStep" parameterType="com.spring.community.PicsCommentDB">
		UPDATE PICS_COMMENT SET PICS_RE_STEP=PICS_RE_STEP+1 WHERE PICS_RE_REF=#{PICS_RE_REF}
	</update>
	
<!-- 	<select id="passwdcheck" parameterType="int" resultType="String">	
		SELECT PASS FROM PICS_COMMENT WHERE PICS_RE_NUM = #{PICS_RE_NUM}
	</select> -->

	
	<!-- <select id="getPicsCount" parameterType="java.util.HashMap" resultType="int">
			SELECT count(*) FROM PICS  WHERE 1=1
		  <if test="PICS_REVIEW == 1">  AND PICS_REVIEW=#{PICS_REVIEW} </if>
		  <if test="PICS_CATEGORY != 'all'"> AND PICS_CATEGORY=#{PICS_CATEGORY} </if> 
	</select>
	
	<select id="getPicsAll" parameterType="java.util.HashMap" resultMap="picsResultMap">	
 		SELECT * FROM
		(SELECT rownum rnum, PICS_NUM, PICS_MEMBER, PICS_NICK, PICS_DATE, PICS_CATEGORY, PICS_LIKE, PICS_WORKSHOP, PICS_TAG, PICS_READ, PICS_REVIEW,  
		PICS_CONTENT_1, PICS_CONTENT_2, PICS_CONTENT_3, PICS_FILE_1, PICS_FILE_2, PICS_FILE_3, PICS_REF
        FROM (SELECT * FROM PICS WHERE 1=1
		  <if test="PICS_REVIEW == 1">  AND PICS_REVIEW=#{PICS_REVIEW} </if>
		  <if test="PICS_CATEGORY != 'all'"> AND PICS_CATEGORY=#{PICS_CATEGORY} </if>
		  <if test="keyword != null"> AND PICS_TAG LIKE '%'||#{keyword}||'%'</if>
		  <if test="option != null"> 
		  	<if test="option == 'tag'">
				AND PICS_TAG LIKE '%'||#{keyword}||'%'
			</if>
			<if test="option == 'write'">
				AND PICS_NICK LIKE '%'||#{keyword}||'%'
			</if>
			<if test="option == 'content'">
				AND (PICS_CONTENT_1 LIKE '%'||#{keyword}||'%'
				OR PICS_CONTENT_2 LIKE '%'||#{keyword}||'%'
				OR PICS_CONTENT_3 LIKE '%'||#{keyword}||'%')
			</if>
		  </if>
           ORDER BY
          <if test="sort == 'like'"> PICS_LIKE DESC </if>
          <if test="sort == 'read'"> PICS_READ DESC </if>                        
          <if test="sort == 'new'"> PICS_DATE DESC </if>
          ))
          <![CDATA[ WHERE rnum >= #{startrow} AND rnum <= #{endrow} ]]> 
	</select>
	

	<select id="getPicsDetail" parameterType="com.spring.community.PicsVO" resultMap="picsResultMap">
		SELECT * FROM PICS WHERE PICS_NUM =#{PICS_NUM}
	</select>
	
	<select id="getPicsOfMemberUpload" parameterType="com.spring.community.PicsVO" resultMap="picsResultMap">
	SELECT * FROM PICS WHERE PICS_MEMBER=#{PICS_MEMBER} ORDER BY PICS_DATE DESC
	</select>
	
	<update id="updatePicsReadCount" parameterType="com.spring.community.PicsVO">
	UPDATE PICS SET PICS_READ=PICS_READ+1 WHERE PICS_NUM =#{PICS_NUM}
	</update>

SELECTKEY
	<insert id="insertStudents">
		<selectKey keyProperty="id" resultType="int" order="BEFORE">
			select SEQ_ID.nextval FROM DUAL
		</selectKey>
		insert into Students
		(id, name , email)
		values
		(#{id}, #{name}, #{email})
	</insert>

 	<insert id="insertPics"	parameterType="com.spring.community.PicsVO">
		INSERT INTO PICS
	(PICS_NUM, PICS_MEMBER, PICS_NICK, PICS_DATE, PICS_CATEGORY, PICS_LIKE, PICS_WORKSHOP, PICS_TAG, PICS_READ, PICS_REVIEW,  
		PICS_CONTENT_1, PICS_CONTENT_2, PICS_CONTENT_3, PICS_FILE_1, PICS_FILE_2, PICS_FILE_3, PICS_REF)
	VALUES(SEQ_PICS.NEXTVAL, #{PICS_MEMBER}, #{PICS_NICK}, SYSDATE, #{PICS_CATEGORY}, #{PICS_LIKE}, #{PICS_WORKSHOP}, #{PICS_TAG}, 0, #{PICS_REVIEW},  
	 #{PICS_CONTENT_1}, #{PICS_CONTENT_2}, #{PICS_CONTENT_3}, #{PICS_FILE_1, jdbcType=VARCHAR}, #{PICS_FILE_2, jdbcType=VARCHAR}, #{PICS_FILE_3, jdbcType=VARCHAR}, SEQ_PICS_REF.NEXTVAL)
		<selectKey keyProperty="PICS_REF" resultType="Integer"	order="AFTER">
			SELECT SEQ_PICS_REF.CURRVAL FROM DUAL
		</selectKey>
	</insert> 
	
	<delete id="deletePics" parameterType="com.spring.community.PicsVO">	
		DELETE FROM PICS WHERE PICS_NUM=#{PICS_NUM}
	</delete>
	
	<update id="updatePics" parameterType="com.spring.community.PicsVO">
	UPDATE PICS SET 
	PICS_CATEGORY=#{PICS_CATEGORY}, PICS_WORKSHOP=#{PICS_WORKSHOP}, PICS_TAG=#{PICS_TAG}, PICS_REVIEW=#{PICS_REVIEW},  
		PICS_CONTENT_1=#{PICS_CONTENT_1}, PICS_CONTENT_2=#{PICS_CONTENT_2}, PICS_CONTENT_3=#{PICS_CONTENT_3}	
		<if test="PICS_FILE_1 !=null">
			, PICS_FILE_1=#{PICS_FILE_1, jdbcType=VARCHAR}
		</if>
		<if test="PICS_FILE_2 !=null">
			, PICS_FILE_2=#{PICS_FILE_2, jdbcType=VARCHAR}
		</if>
		<if test="PICS_FILE_3 !=null">
			, PICS_FILE_3=#{PICS_FILE_3, jdbcType=VARCHAR}
		</if>
	 WHERE PICS_NUM=#{PICS_NUM}	
	</update> -->
	
	
	<!-- 	<select id="getPicsCategory" parameterType="java.util.HashMap" resultMap="picsResultMap">
		SELECT * FROM
		(SELECT rownum rnum, PICS_NUM, PICS_MEMBER, PICS_TITLE, PICS_DATE, PICS_CATEGORY, 
        PICS_CONTENT, PICS_LIKE, PICS_WORKSHOP, PICS_ROUTE,	PICS_TAG 
		FROM (SELECT * FROM PICS WHERE PICS_CATEGORY=#{PICS_CATEGORY} AND PICS_REVIEW = #{PICS_REVIEW} ORDER BY PICS_DATE DESC))
		<![CDATA[ WHERE rnum >= #{startrow} AND rnum <= #{endrow} ]]> 
	</select> -->
	



</mapper>
