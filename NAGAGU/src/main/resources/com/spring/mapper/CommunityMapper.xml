<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 이 xml문서와 맵핑할 인터페이스 경로, 이름 -->
<mapper namespace="com.spring.mapper.CommunityMapper">
<!-- 	<resultMap type="java.util.HashMap" id="hashmapVO">
		<result property="PICS_NUM" column="PICS_NUM" />	
		<result property="PICS_MEMBER" column="PICS_MEMBER" />	
		<result property="PICS_NICK" column="PICS_NICK" />
		<result property="PICS_DATE" column="PICS_DATE" />	
		<result property="PICS_CATEGORY" column="PICS_CATEGORY" />		
		<result property="PICS_LIKE" column="PICS_LIKE" />	
		<result property="PICS_TAG" column="PICS_TAG" />	
		<result property="PICS_READ" column="PICS_READ" />
		<result property="PICS_REVIEW" column="PICS_REVIEW" />		
		<result property="PICS_MAIN_IMAGE" column="PICS_MAIN_IMAGE" />	
		<result property="PICS_CONTENT" column="PICS_CONTENT"/>
		<result property="PICS_PRODUCT" column="PICS_PRODUCT" />
	</resultMap> -->

	<resultMap type="com.spring.community.PicsVO" id="picsResultMap">
		<result property="PICS_NUM" column="PICS_NUM" />	
		<result property="PICS_MEMBER" column="PICS_MEMBER" />	
		<result property="PICS_NICK" column="PICS_NICK" />
		<result property="PICS_DATE" column="PICS_DATE" />	
		<result property="PICS_CATEGORY" column="PICS_CATEGORY" />		
		<result property="PICS_LIKE" column="PICS_LIKE" />	
		<result property="PICS_TAG" column="PICS_TAG" />	
		<result property="PICS_READ" column="PICS_READ" />
		<result property="PICS_REVIEW" column="PICS_REVIEW" />		
		<result property="PICS_MAIN_IMAGE" column="PICS_MAIN_IMAGE" />	
		<result property="PICS_CONTENT" column="PICS_CONTENT" />
		<result property="PICS_PRODUCT" column="PICS_PRODUCT" />
	</resultMap>
	<resultMap type="java.util.HashMap" id="hashmapVO">
	</resultMap>
	
	<select id="getPicsCount" parameterType="java.util.HashMap" resultType="int">
			SELECT count(*) FROM PICS  WHERE 1=1
		  <if test="PICS_REVIEW == 1">  AND PICS_REVIEW=#{PICS_REVIEW} </if>
		  <if test="PICS_CATEGORY != 'all'"> AND PICS_CATEGORY=#{PICS_CATEGORY} </if> 
	</select>
	
	<select id="getPicsAll" parameterType="java.util.HashMap" resultMap="hashmapVO">	
 		SELECT *
		FROM PICS P, NAGAGU_MEMBER M
		WHERE P.PICS_MEMBER = M.MEMBER_NUM
		  <if test="PICS_REVIEW != 0">  AND PICS_REVIEW=#{PICS_REVIEW} </if>
		  <if test="PICS_CATEGORY != 'all'"> AND PICS_CATEGORY=#{PICS_CATEGORY} </if>
		  <if test="option != null"> 
		  	<if test="option == 'tag'">
				AND PICS_TAG LIKE '%'||#{keyword}||'%'
			</if>
			<if test="option == 'write'">
				AND PICS_NICK LIKE '%'||#{keyword}||'%'
			</if>
			<if test="option == 'content'">
				AND PICS_CONTENT LIKE '%'||#{keyword}||'%'
			</if>
		  </if>
           ORDER BY
          <if test="sort == 'like'"> PICS_LIKE DESC </if>
          <if test="sort == 'read'"> PICS_READ DESC </if>                        
          <if test="sort == 'new'"> PICS_DATE DESC </if>
          
          <!-- <![CDATA[ WHERE rnum >= #{startrow} AND rnum <= #{endrow} ]]>  -->
	</select>
	

	<select id="getPicsDetail" parameterType="com.spring.community.PicsVO" resultMap="picsResultMap">
		SELECT * FROM PICS WHERE PICS_NUM =#{PICS_NUM}
	</select>
	
	<select id="getPicsOfMemberUpload" parameterType="com.spring.community.PicsVO" resultMap="picsResultMap">
	SELECT * FROM PICS WHERE PICS_MEMBER=#{PICS_MEMBER} ORDER BY PICS_DATE DESC
	</select>
	
	<update id="updatePicsReadCount" parameterType="com.spring.community.PicsVO">
	UPDATE PICS SET PICS_READ=PICS_READ+1 WHERE PICS_NUM =#{PICS_NUM}
	</update>
	
 	<insert id="insertPics"	parameterType="com.spring.community.PicsVO">
		INSERT INTO PICS
	VALUES(SEQ_PICS.NEXTVAL, #{PICS_MEMBER}, #{PICS_NICK}, SYSDATE, #{PICS_CATEGORY}, #{PICS_LIKE, jdbcType=INTEGER}, 
	#{PICS_TAG}, 0, #{PICS_REVIEW}, #{PICS_MAIN_IMAGE, jdbcType=VARCHAR}, #{PICS_CONTENT, jdbcType=VARCHAR}, #{PICS_PRODUCT,jdbcType=INTEGER})
	</insert> 
	
	<delete id="deletePics" parameterType="com.spring.community.PicsVO">	
		DELETE FROM PICS WHERE PICS_NUM=#{PICS_NUM}
	</delete>
	
	<update id="updatePics" parameterType="com.spring.community.PicsVO">
	UPDATE PICS SET 
	PICS_CATEGORY=#{PICS_CATEGORY}, PICS_TAG=#{PICS_TAG}, 
	PICS_REVIEW=#{PICS_REVIEW},  PICS_MAIN_IMAGE=#{PICS_MAIN_IMAGE}, PICS_CONTENT=#{PICS_CONTENT}	
	WHERE PICS_NUM=#{PICS_NUM}	
	</update>
	
	<update id="deletePicsFile" parameterType="com.spring.community.PicsVO">	
		UPDATE PICS 
		<set> 
			PICS_MAIN_IMAGE=#{PICS_MAIN_IMAGE, jdbcType=VARCHAR}
			, PICS_CONTENT=#{PICS_CONTENT, jdbcType=VARCHAR}
		</set>
		WHERE PICS_NUM=#{PICS_NUM}
	</update>
	
	<!-- 좋아요 수 업데이트 -->
	<update id="updatePicsLike" parameterType="java.util.HashMap">	
		UPDATE PICS SET	
		<if test="count == 'plus'">
			PICS_LIKE = PICS_LIKE +1
		</if>
		<if test="count == 'minus'">
			PICS_LIKE = PICS_LIKE -1
		</if>
		WHERE PICS_NUM=#{PICS_NUM}
	</update>
	<!-- 좋아요 한 사진 리스트(좋아요사진=사진넘버 중에서 파라미터 멤버가 좋아한 사진들) -->
    <select id="getMemberLikePics" parameterType="java.util.HashMap" resultMap="picsResultMap">	
 		SELECT *
        FROM PICS, MEMBER_LIKE
        WHERE LIKE_MEMBER=#{MEMBER_NUM} AND PICS_NUM=LIKE_PICS
	</select>



</mapper>
